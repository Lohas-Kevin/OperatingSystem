[01/28/2019]



  PROCESS

 +------------------------+
 | runtime heap           | <== dynamically allocated memory
 |      | QQQQQQQ XXXXXX  |     -- the "new" keyword in C++/Java
 |      | YYYYYYYYYYYYYY  |     -- in C, malloc(), calloc(), realloc()
 |      | YYYYYYYY        |     -- don't forget to use free().......
 |      |                 |         ...otherwise, we have a memory leak  :-(
 |      v                 |
 |                        |
 |                        |
 |                        |
 |                        |
 |      ^                 |
 |      |                 |
 |      |                 |
 |      | square()        |
 |      | main()          |
 | runtime stack          | <== statically allocated memory
 |------------------------|      (e.g., int x, char *y, etc.)
 | code/data/etc.         |
 | .data "David"          |
 +------------------------+


A process is a "running program" or "program in execution"

Processes have a variety of states:


  RUNNING            READY                  WAITING (on I/O)
   STATE             STATE                   STATE

  +-----+                     ???<==P8   +---------------------+
  |     |     +---------------------     |                     |
  | CPU | <== | P3 | P5 | P2 | etc.      |  I/O subsystem      |
  | P12 |     +---------------------     |                     |
  +-----+                                +---------------------+

  RUNNING STATE: process is actively using the CPU
                 (i.e., executing/running its instructions)

  READY STATE: process is ready to use the CPU
               (i.e., idly waiting in the Ready Queue)

  WAITING STATE: process is waiting for I/O operation(s) to complete


CPU Scheduling (a.k.a. Short-Term Scheduling)

-- The scheduling system enables one process to use the CPU
    while other processes are waiting in the ready queue to
     use the CPU (or some are waiting for I/O)

-- The goals of CPU scheduling are to make the efficient use of the CPU
    and to minimize the turnaround and wait times for each running process

    -- We also want to achieve "fairness" among all processes
        to the extent possible

-- The job of the CPU Scheduler is, when the CPU becomes free,
    to select the next process from the ready queue

-- CPU Scheduling Algorithms:

   First Come First Served (FCFS)

   Shortest Job First (SJF)

   Shortest Remaining Time (SRT)

   Priority Scheduling

   Round Robin (RR)

  RUNNING            READY                  WAITING (on I/O)
   STATE             STATE                   STATE

  +-----+                     ???<==P8   +---------------------+
  |     |     +---------------------     |                     |
  | CPU | <== | P3 | P5 | P2 | etc.      |  I/O subsystem      |
  | P12 |     +---------------------     |                     |
  +-----+                                +---------------------+



  fork-with-wait.c example



                   [PARENT/ORIGINAL PROCESS]
                        before fork()...
                    /                     \
                   /                       \
                  /                         \
                 /                           \
         [PARENT]                             [CHILD]
         after fork()...                      after fork()...
                                              <delay>
         PARENT: my child process ID is ###   CHILD: happy birthday!
                                              All done!
         PARENT: waiting for my
          child process to terminate....

        <the above two sets of outputs can interleave with one another,
           but the relative orders of each are exactly as shown>

                 \                           /
                  \                         /  [CHILD PROCESS TERMINATES]
                   \                       /
                    \                     /
          <after the wait() or waitpid() call in the PARENT>

                      PARENT: child process ### terminated...
                      [PARENT] All done!

                   

goldsd@linux04:~/s19/os$ ./a.out 
before fork()...
after fork()...
after fork()...
CHILD: happy birthday!
All done
PARENT: my child process ID is 21745
All done
goldsd@linux04:~/s19/os$ ./a.out 
before fork()...
after fork()...
after fork()...
PARENT: my child process ID is 21747
All done
goldsd@linux04:~/s19/os$ CHILD: happy birthday!
All done



also possible, but unlikely:
PARENT: my child process ID is 21747
CHILD: happy birthday!
All done
All done


What happens when a child process terminates?
-- the child process becomes a defunct/zombie process,
    i.e., the process is no longer running, but the process
     still has data associated with it (e.g., exit status,
      how the process was terminated, etc.) in the process
       table that the OS manages
-- a signal (SIGCHLD) is sent to the parent process, though
    by default, this signal is ignored (man 7 signal)
-- the zombie will remain until the parent process calls
    wait() or waitpid()
     -- or if the parent process terminates before the
         child process terminates, then the child process
          gets inherited by a top-level process (pid 1)

What happens if the parent process does not call wait() or
 waitpid() for a child process?
-- the zombies can fill up the process table....



Don't do this (at least not on your machine):

  while( 1 ) { fork(); }






