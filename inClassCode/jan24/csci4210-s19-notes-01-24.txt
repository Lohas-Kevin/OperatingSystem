[01/24/2019]

QUIZ 1 -- Clear your desks!

-- no laptops, notes, books, phones, etc.

-- individual work only






Homework 1 due by 11:59PM Friday 1/25 (tmrw!)
-- be sure you do NOT have any '[' or ']' characters in your code
    (or comments) at all
-- be sure you use calloc() and realloc() as specified in the
    homework specifications
-- watch out for:
   -- not enough memory allocated via calloc()/realloc()

#ifdef DEBUG_MODE
     printf( "x is %d and sizeof( y ) is %d\n", x, sizeof( y ) );
#endif
     calloc( x, sizeof( y ) );

   -- realloc() may end up moving the memory, i.e., changing the ptr

     char * x = calloc( 10, sizeof( char ) );
     if ( x == NULL ) { ... }
     ...
     /* extend the memory by 10 more byte */
     x = realloc( x, 20 * sizeof( char ) );

     if ( x == NULL ) { ... }

   -- free() up all dynamically allocated memory

   -- read man pages -- then re-read them

        if ( isalnum( c ) == 1 )
        {
          ...
        }
        else ....

    re-read the man page and see that isalnum() returns nonzero rather than 1

   -- use valgrind (or drmemory) when you're done and as a double-check

   -- use gdb only if you know how to use it...


    Array of character (or struct) pointers (char*)

          +----+
cache: [0]|NULL|
          +----+
       [1]|NULL|
          +----+
       [2]|NULL|
          +----+
       [3]|NULL|
          +----+
       [4]|NULL|
          +----+
       ...|    |
          +----+
      [46]|NULL|
          +----+



  PROCESS

 +------------------------+
 | runtime heap           | <== dynamically allocated memory
 |      | QQQQQQQ XXXXXX  |     -- the "new" keyword in C++/Java
 |      | YYYYYYYYYYYYYY  |     -- in C, malloc(), calloc(), realloc()
 |      | YYYYYYYY        |     -- don't forget to use free().......
 |      |                 |         ...otherwise, we have a memory leak  :-(
 |      v                 |
 |                        |
 |                        |
 |                        |
 |                        |
 |      ^                 |
 |      |                 |
 |      |                 |
 |      | square()        |
 |      | main()          |
 | runtime stack          | <== statically allocated memory
 |------------------------|      (e.g., int x, char *y, etc.)
 | code/data/etc.         |
 | .data "David"          |
 +------------------------+


A process is a "running program" or "program in execution"

Processes have a variety of states:


  RUNNING            READY                  WAITING (on I/O)
   STATE             STATE                   STATE

  +-----+                     ???<==P8   +---------------------+
  |     |     +---------------------     |                     |
  | CPU | <== | P3 | P5 | P2 | etc.      |  I/O subsystem      |
  | P12 |     +---------------------     |                     |
  +-----+                                +---------------------+

  RUNNING STATE: process is actively using the CPU
                 (i.e., executing/running its instructions)

  READY STATE: process is ready to use the CPU
               (i.e., idly waiting in the Ready Queue)

  WAITING STATE: process is waiting for I/O operation(s) to complete


CPU Scheduling (a.k.a. Short-Term Scheduling)

-- The scheduling system enables one process to use the CPU
    while other processes are waiting in the ready queue to
     use the CPU (or some are waiting for I/O)

-- The goals of CPU scheduling are to make the efficient use of the CPU
    and to minimize the turnaround and wait times for each running process

    -- We also want to achieve "fairness" among all processes
        to the extent possible

-- The job of the CPU Scheduler is, when the CPU becomes free,
    to select the next process from the ready queue

-- CPU Scheduling Algorithms:

   First Come First Served (FCFS)

   Shortest Job First (SJF)

   Shortest Remaining Time (SRT)

   Priority Scheduling

   Round Robin (RR)

  RUNNING            READY                  WAITING (on I/O)
   STATE             STATE                   STATE

  +-----+                     ???<==P8   +---------------------+
  |     |     +---------------------     |                     |
  | CPU | <== | P3 | P5 | P2 | etc.      |  I/O subsystem      |
  | P12 |     +---------------------     |                     |
  +-----+                                +---------------------+



  fork-interleaving.c example



                   [PARENT/ORIGINAL PROCESS]
                        before fork()...
                    /                     \
                   /                       \
                  /                         \
                 /                           \
         [PARENT]                             [CHILD]
         after fork()...                      after fork()...
         PARENT: my child process ID is ###   CHILD: happy birthday!
         All done!                            All done!

        <the above two sets of outputs can interleave with one another,
           but the relative orders of each are exactly as shown>


goldsd@linux04:~/s19/os$ ./a.out 
before fork()...
after fork()...
after fork()...
CHILD: happy birthday!
All done
PARENT: my child process ID is 21745
All done
goldsd@linux04:~/s19/os$ ./a.out 
before fork()...
after fork()...
after fork()...
PARENT: my child process ID is 21747
All done
goldsd@linux04:~/s19/os$ CHILD: happy birthday!
All done

