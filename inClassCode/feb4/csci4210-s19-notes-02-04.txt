[02/04/2019]

Quiz 1 was re-graded, so check your grades again in Submitty
 if you had grading questions
-- graded out of 20 points
-- Question 4
   -2 Wrong order
   -3 Line 1 partially wrong
   -3 Line 2 partially wrong
   -5 One line mostly wrong
   -2 Incorrect size of pointer

Bring quiz (also exam) grading questions to me after class or
 during my office hours within one week (by Tues 2/5 office hours)

=====================================================================

ps -ef | grep goldsd


 [PARENT]
    pipe() /* fd 3 is the read end; fd 4 is the write end */
    fork() /* ps */
    fork() /* grep */
    close( p[0] )
    close( p[1] )

 [CHILD ps]
 we want the output on stdout from ps to go to the write end of the pipe
 duplicate fd 4 into fd 1 (using dup2())

 [child grep]
 we want the input in stdin to be the read end of the pipe
 duplicate fd 3 into fd 0 (using dup2())

 

=====================================================================

requirements for IPC:
-- synchronization
-- protocol

types of Inter-Process Communication (IPC)
-- files (a process writes to a file; another process reads the file)
-- shared memory segment(s) <======= ADDED THIS ONE TO THE NOTES
-- pipe (a unidirectional communication channel)
-- message queues
-- socket-based communication (network programming)
-- exit status (from a terminating child process to a parent process)

From "man 3 exit":

The  exit()  function  causes normal process termination and the value of
       status & 0377 is returned to the parent (see wait(2)).
                ^^^^
               leading 0 indicates this is an octal value (11111111 binary)

============================================================================

New jobs are admitted into the system
-- long-term or high-level scheduling

Once in the system, processes go through a number of state changes
-- short-term or low-level scheduling




A process is a "running program" or "program in execution"

Processes have a variety of states:


  RUNNING            READY                  WAITING (on I/O)
   STATE             STATE                   STATE

  +-----+                     ???<==P8   +---------------------+
  |     |     +---------------------     |                     |
  | CPU | <== | P3 | P5 | P2 | etc.      |  I/O subsystem      |
  | P12 |     +---------------------     |                     |
  +-----+                                +---------------------+

  RUNNING STATE: process is actively using the CPU
                 (i.e., executing/running its instructions)

  READY STATE: process is ready to use the CPU
               (i.e., idly waiting in the Ready Queue)

  WAITING STATE: process is waiting for I/O operation(s) to complete


 (job)      (process)
  NEW -----> READY ---------------> RUNNING ----------> TERMINATED
               ^                      |
               |                      |
               |                      |
               |                      v
               -------WAITING----------


CPU Scheduling (a.k.a. Short-Term Scheduling)

-- The scheduling system enables one process to use the CPU
    while other processes are waiting in the ready queue to
     use the CPU (or some are waiting for I/O)

-- The goals of CPU scheduling are to make the efficient use of the CPU
    and to minimize the turnaround and wait times for each running process

    -- We also want to achieve "fairness" among all processes
        to the extent possible

-- The job of the CPU Scheduler is, when the CPU becomes free,
    to select the next process from the ready queue

-- CPU Scheduling Algorithms:

   First Come First Served (FCFS)

   Shortest Job First (SJF)

   Shortest Remaining Time (SRT)

   Priority Scheduling

   Round Robin (RR)


-- Preemption occurs when the currently running process is
    preempted (i.e., "kicked out" or "replaced") from using the CPU

   -- might be because of a newly arriving (more important) process

   -- might be because of a timeout (i.e., the RR algorithm)


Processes in a multiprogramming system COMPETE for the CPU
 (but they also often need to COOPERATE with one another via IPC)


Whenever we switch a process out of the CPU and bring the next process
 in to use the CPU, we have a CONTEXT SWITCH

 -- the state of the currently running process is saved in
     a process control block (PCB), which includes registers,
      program counter, page table, memory maps

 -- the state of the next (or replacement) process is loaded from its PCB

            OVERHEAD !!!


Challenges of CPU scheduling include:
-- Processes alternate bursts of CPU time and I/O time;
    how do we best handle such processes and the process mix?

   +---------+ blocked +---------------------+   +-----------------+
P1 |CPU burst|---------|    CPU burst        |---|      CPU burst  |--->
   +---------+ on I/O  +---------------------+   +-----------------+

   +---+      blocked on I/O                    +---+
P2 |CPU|----------------------------------------|CPU|------------------>
   +---+                                        +---+


   P1 is a CPU-bound or compute-bound process,
    whereas P2 is an I/O-bound process


 QUIZ 2 ----- YAY!

 -- clear your desktops
 -- no talking with your neighbors!
 -- eyes on your own papers!!!

